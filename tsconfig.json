{
    "compilerOptions": {

        // Enables strict type-checking options
        "strict": true,

        // Specifies the ECMAScript target version
        "target": "es2020",

        // Specifies the module code generation
        "module": "es2020",

        // dist should be treated as destroyable minus it's .gitignore directory
        "outDir": "./dist",

        // Modules resolution:
        // - "node" = Mimics Node.js' module resolution mechanism. Looks inside
        //   `node_modules` and works with both `.js` and `.json` files. Compatible
        //    with CJS and ES6 module syntax.
        // - "bundler" = Supports package.json "imports" and "exports", but unlike
        //   the Node.js resolution modes, bundler never requires file extensions on
        //   relative paths in imports.
        // - "classic" = TypeScript's original resolution strategy. Doesn't consider
        //   `node_modules` or understand JSON files and is less commonly used today.
        // - https://github.com/babel/babel/issues/10237#issuecomment-513028440
        // - https://www.typescriptlang.org/tsconfig#moduleResolution
        "moduleResolution": "node",

        // Support non "* as" imports; ex:
        //   `import React from 'react'` instead of `import * as React from 'react'`
        "allowSyntheticDefaultImports": true,

        // Changes the emitted JavaScript to add an extra layer of compatibility for
        //    default imports
        "esModuleInterop": true,

        // Allows JavaScript files to be imported
        // - Needed with ^.+\\.[tj]sx?$ Jest transform so .js `node_modules` are capable of
        //   being imported
        // - Disabled by default due to not needing to be enabled by default - usually needed
        //   importing/testing things in `node_modules` due to own project being TypeScript
        // "allowJs": true,

        // Path aliases
        // - Used to avoid excessive relative pathing and/or weird absolute pathing hacks
        "paths" : {
            "@src/*" : [ "./src/*" ]
        },
    },

    "include": [

        // Transpile files ending in .ts
        "**/*.ts",
    ],

    "exclude": [

        // Ignore files ending in .test.ts (Jest tests)
        "**/*.test.ts",

        // Ignore integration tests directory
        "./tests",

        // Ignore Swagger docs directory
        "./swagger",
    ]
}
